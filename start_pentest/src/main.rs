/*
Auther: Pyro
Purpose: To automate setting up my notes at the start of a pentest project
Install Instructions: Change the "Pentest_notes" variable below to the directory you keep your pentest notes in. Then run cargo build to compile and copy the binary at ./target/debug/start_pentest to something like /usr/bin

some special instructions for the file formats
the scope.txt file should be in the following format 
host 3rd_party approval
example:
192.168.1.1 no yes
192.168.1.2 yes no
etc etc.

*/
use std::fs;
use std::env;
use std::io::Write;
//use std::process::Command;
fn main() {
    // change this to you own pentest notes folder
    let pentest_notes = "/path/to/pentest/notes/folder";
    //change thsi to your own root for the obsidian vault
    let obsidian_vault = "/path/to/obsidian/vault";
    // change this where you store your files for writing pentests
    let project_files = "/path/to/project/files/folder";
    let args: Vec<String> = env::args().collect();
    let usage = "
Welcome!!
./start_pentest /path/to/scope.txt/file company_name project_name
example:
start_pentest ./scope.txt victim_company_incorporated 2022_external_pentest
    ";
    if args.len() == 4{
        // the following two lines make the scope a vector
        let scope_content = fs::read_to_string(&args[1]).expect("Error reading scope file");
        let scope: Vec<&str> = scope_content.split("\n").collect(); 
        let company_name = &args[2];
        let project_name = &args[3];
        let project_folder_path = format!("{}/{}/{}", pentest_notes, company_name,project_name);
        let project_files_folder_path = format!("{}/{}/{}", project_files, company_name, project_name);
        let working_folder = format!("{}/working", &project_files_folder_path);
        let writing_folder = format!("{}/writing", &project_files_folder_path);
        let delivery_folder = format!("{}/delivery", &project_files_folder_path);
        // make the folders for this project's notes and files
        fs::create_dir_all(&project_folder_path).expect("Error creating project folder");
        fs::create_dir_all(&project_files_folder_path).expect("Error creating project file folder");
        fs::create_dir_all(&working_folder).expect("error creating working directory");
        fs::create_dir_all(&writing_folder).expect("Error creating writing direcotry");
        fs::create_dir_all(&delivery_folder).expect("Error creating delivery direcotry");
        //set up the general note files we need
        let mut general_notes = fs::File::create(format!("{}/general.md", &project_folder_path)).expect("error creating general notes file");
        let mut attack_notes = fs::File::create(format!("{}/attacks.md", &project_folder_path)).expect("error creating attack notes file");
        let mut host_notes = fs::File::create(format!("{}/host_notes.md", &project_folder_path)).expect("error creating host notes file");
        let mut finding_notes = fs::File::create(format!("{}/findings.md", &project_folder_path)).expect("error creating findings notes file");
        //let mut directory_bruteforcing = fs::File::create(format!("{}/findings.md", &project_folder_path)).expect("error creating brute_forcing notes file");
        writeln!(&mut general_notes, "# Scope").expect("error writing to general notes file");
        writeln!(&mut general_notes, "IP | Third Party | Approval").expect("error writing to general notes file");
        writeln!(&mut general_notes, "---|-------------|----------").expect("error writing to general notes file");
        // set up notes for each host in the scope file
        for address in &scope{
                if address.len() > 0{
                let address_vec: Vec<&str> = address.split(" ").collect();
                let address_line = format!("{}|{}|{}", address_vec[0], address_vec[1], address_vec[2]);
                writeln!(&mut general_notes, "{}", address_line).expect("error writing to General Notes File");
                writeln!(&mut attack_notes, "# {}", address_vec[0]).expect("error writing to attack notes file");
                writeln!(&mut host_notes, "# {}", address_vec[0]).expect("error writing to Attack notes file");
                writeln!(&mut finding_notes, "# {}", address_vec[0]).expect("error writing to findings notes file");

            }
        }
        writeln!(&mut general_notes, "# PPC").expect("failed to write general notes");
        write!(&mut general_notes, "
Planning call notes:
* methodolgy
    * whole month testing window
    * start with a vuln scan in nessus pro
    * pentesting execution standard framework
        * info gathering
        * recon
        * exlpoitation
        * reporting 
        * primary objective
            * reasonable and expected protections are in place
            * see if we can get access to the internal network
                * if we do get inside 
                    * reach out to the contact and see what they'd want us to know
    * questions to ask
        * custom objectives
            * 
        * testing main website
        * password attacks
            * password sprays 3-12 hours
            * lock out policy - 
                * observation window?
                    * standard lockout policy - 10 per hour
                    * MSO testing - nope - next time
            * should we include office 365 accounts for password accounts
                * 
Questions for FRSecure
        ").expect("failed to write ppc note template");
        write!(&mut general_notes, "
# Recon
## DNS Dumpster
Hostname | IP | Type
---------|----|-----

## Ports
Port | hosts 
-----|------

## Services
IP | Hostname | port | Service name | Vulnerabilities
---|----------|------|--------------|----------------

## Enumeration in progress
### Directory Bruteforcing
Enumeration notes | finished
----------------------|---------

### DNS Bruteforcing
domain name | IP | inscope?
------------|------|--------

# Attacks
Attack notes | finished | success
-------------|----------|--------\n").expect("faile to write pentest notes");
        for address in &scope{
            if address.len() > 0{
            let address_vec: Vec<&str> = address.split(" ").collect();
            let address_line = format!("[[{}/attacks#{}]] | no | no", obsidian_vault, address_vec[0]);
            writeln!(&mut general_notes, "{}", address_line).expect("error writing address line");
        }
    }
}

else{
    print!("{}", usage);
}

}
